
@using Syncfusion.JavaScript
@using System.Collections.Generic
@using System.Linq

@*@model IEnumerable<syncfusion_payc.Models.FlujoProyectosViewModels>*@
@model IEnumerable<syncfusion_payc.Models.ASPECTOS>
@{
    ViewBag.Title = "Agregar";
}
@if (User.Identity.IsAuthenticated)
{
    <div data-wizard-init>
        <!-- Etapas CARGUE DE PROYECTOS-->
        <!-- <ul class="steps">
            <li class="img-circle step-purple" data-step="1">Etapa 1</li>
            <li class="img-circle step-purple" data-step="2">Etapa 2</li>
            <li class="img-circle step-purple" data-step="3">Etapa 3</li>
            <li class="img-circle step-purple" data-step="4">Etapa 4</li>
            <li class="img-circle step-purple" data-step="5">Etapa 5</li>
            <li class="img-circle step-purple" data-step="6">Etapa 6</li>
        </ul> -->

        <ul class="steps">
            <li class="img-circle step-purple" data-step="1">Etapa 1</li>
        </ul>
        <!-- Contenido Etapas -->
        <div class="steps-content">
            <h2 class="title">FORMULARIO DE REGISTRO DE ASPECTOS</h2><br>
            <div class="column-inter col-xs-12 col-md-6">
                <!-- Etapa 1 CONTRATOS Y SUS CONDICIONES-->
                <div data-Step="1">
                    <!-- primera grid etapa 2-->
                    <div class="column-inter col-xs-12 col-md-6">

                        @*PREGUNTA*@
                        <div class="form-group div_cliente">
                            <label>ASPECTO</label>
                            @Html.TextArea("DESCRIPCION", null, new { @class = "e-textbox" })
                            <!-- style = "width: 500px;" -->
                            <!-- @@Html.TextArea("DESCRIPCION", null, new {  style = "width: 500px;", rows = "20" }) -->
                        </div>

                        @*BOTON REGISTRAR PREGUNTA*@
                        <div class="form-group">
                            <div class="col-sm-4 col-md-3" id="registro_pregunta">
                                <!-- <button class="btn btn-default" onclick="leer_pregunta($(this))">Registrar Pregunta</button> -->
                                <button class="btn btn-default" onclick="leer_aspecto()">Registrar Aspecto</button>
                            </div>
                            <div class="col-sm-8 col-md-2">
                            </div>
                            <div class="col-sm-8 col-md-2">
                            </div>
                            <div class="col-sm-4 col-md-3" id="registro_pregunta">
                                <p></p>
                            </div>
                            <div class="col-sm-8 col-md-2">
                            </div>
                        </div>
                        <br /><br /><br />
                    </div>
                </div>



                <!-- Etapa 2 GRID DE RESPUESTAS-->
                <div data-Step="2">
                    <!-- primera grid etapa 2-->
                    <div class="column-inter col-xs-12 col-md-9">
                        @*GRID DE RESPUESTAS*@
                        <div class="form-group">
                            <label name="aspecto">CRITERIOS DEL ASPECTO:</label>
                            <div class="control-section">
                                @(Html.EJ().Grid<syncfusion_payc.Models.ATRIBUTOS>("Grid")
                                .Datasource(ds => ds.URL("GetOrderData").InsertURL("PerformInsert").UpdateURL("PerformUpdate").RemoveURL("PerformDelete").Adaptor(AdaptorType.UrlAdaptor))
                                .AllowPaging()
                                .AllowFiltering()
                                .Locale("es-CO")
                                .AllowResizeToFit(true)
                                .AllowMultiSorting()
                                .AllowSorting()
                                .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
                                .ClientSideEvents(e => e.ActionBegin("inicio_grid"))
                                .ToolbarSettings(toolbar =>
                                    {
                                    toolbar.ShowToolbar().ToolbarItems(items =>
                                        {
                                        items.AddTool(ToolBarItems.Add);
                                        items.AddTool(ToolBarItems.Edit);
                                        items.AddTool(ToolBarItems.Delete);
                                        items.AddTool(ToolBarItems.Update);
                                        items.AddTool(ToolBarItems.Cancel);
                                        });
                                    })
                                .Columns(col =>
                                {
                                col.Field("COD_ATRIBUTO").HeaderText("COD_ATRIBUTO").Visible(true).IsPrimaryKey(true).Format("{0:n0}").EditType(EditingType.NumericEdit).Add();
                                col.Field("COD_ASPECTO").HeaderText("COD_ASPECTO").ForeignKeyField("COD_ASPECTO").ForeignKeyValue("COD_ASPECTO").Visible(true).Add();
                                col.Field("DESCRIPCION").HeaderText("Atributo").Add();
                                col.Field("PESO").HeaderText("Peso").Add();
                                col.Field("FECHA_CREACION").HeaderText("Fecha registro").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
                                col.Field("FECHA_ULTIMA_MODIFICACION").HeaderText("Fecha última edición").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
                                col.Field("COD_USUARIO_ULTIMA_MODIFICACION").HeaderText("Editado por").Add();
                                }))
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @*Javascript*@
    <script type="text/javascript">
        // document.getElementById("grid").disabled = true;

//         $('.contenedor_loader').hide();

//                 $("#PivotGrid1").show();

//                 var gridObj = $("#PivotGrid1").data("ejPivotGrid");

//                 gridObj.refreshPivotGrid();


         function leer_aspecto() {
            // //traer valores de aspecto del DOM junto con timestamp e informacion de usuario
            $aspecto= document.getElementById("DESCRIPCION").value;
            //     // $atributo=document.getElementById("ATRIBUTOS").value;
            var fecha_creacion = "@HttpContext.Current.Timestamp";
             var usuario_creacion = "@HttpContext.Current.User.Identity.Name";
            //  alert(usuario_creacion + " y la fecha es " + fecha_creacion);

            //guardar valores de variables en arreglos representando filas a registrar en db
            var aspecto = {
                COD_ASPECTO: null,
                DESCRIPCION: $aspecto,
                COD_USUARIO_CREACION: null,
                COD_USUARIO_ULTIMA_MODIFICACION: null,
                FECHA_CREACION: fecha_creacion,
                FECHA_ULTIMA_MODIFICACION: fecha_creacion,
                ESTADO_ASPECTO: null
            };

            //crear JSON con objetos asociados a arreglos(filas) para pasarlos como parametro a la db
            var data = JSON.stringify({ ASPECTO: aspecto });
            //generación de url(accion) que realiza insert en DB
            var url = "guardar_aspecto";
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (success) {
                   //  alert(success); para probar que devuelve el cod_aspecto correcto
                    //Redirección al edit del aspecto creado una vez se ha guardado y generado el COD_ASPECTO
                   window.location = "EditAspecto/" + success.COD_ASPECTO;
                }
            });
        } 

        //Region: backup de la function leer pregunta como base para el leer_aspecto (funcion para registrar que viene del boton "registro pregunta/atributo")
        //  function leer_pregunta() {
        //     //traer valores de preguntas y atributos seleccionados junto con timestamp e informacion de usuario
        //     $pregunta= document.getElementById("DESCRIPCION").value;
        //     $atributo=document.getElementById("ATRIBUTOS").value;
        //     var fecha_creacion = "@@HttpContext.Current.Timestamp";
        //     var usuario_creacion = "@@HttpContext.Current.User.Identity.Name"

        //      //guardar valores de variables en arreglos representando filas a registrar en db
        //      var pregunta = {
        //          COD_PREGUNTA: null,
        //          DESCRIPCION: $pregunta,
        //          COD_USUARIO_CREACION: null,
        //          COD_USUARIO_ULTIMA_MODIFICACION: null,
        //          FECHA_CREACION: fecha_creacion,
        //          FECHA_ULTIMA_MODIFICACION: fecha_creacion,
        //          ESTADO_PREGUNTA: null
        //      };

        //      //crear JSON con objetos asociados a arreglos(filas) para pasarlos como parametro a la db
        //      var data = JSON.stringify({ PREGUNTA: pregunta });
        //      //generación de url(accion) que realiza insert en DB
        //      var url = "guardar_pregunta";
        //      $.ajax({
        //          type: "POST",
        //          url: url,
        //          data: data,
        //          dataType: "json",
        //          contentType: "application/json; charset=utf-8",
        //          success: function (success) {
        //              alert(success);
        //          }
        //      });

        // } 
        //EndRegon


        //intento con el funciton para hacer un leer_ con un post que me  haga return de la info
        @*function leer_pregunta(){

            //traer valores de preguntas y atributos seleccionados junto con timestamp e informacion de usuario
            $pregunta = "pregunta_1";
            $atributo=document.getElementById("ATRIBUTOS").value;
            var fecha_creacion = "@HttpContext.Current.Timestamp";
            var usuario_creacion = "@HttpContext.Current.User.Identity.Name"

            //guardar valores de variables en arreglos representando filas a registrar en db
            //var pregunta = {
            //    DESCRIPCION:$pregunta
            //};

            //crear JSON con objetos asociados a arreglos(filas) para pasarlos como parametro a la db
            var data = JSON.stringify($pregunta);
            //generación de url(accion) que realiza insert en DB
            var url = "leer_pregunta";
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (success) {
                    alert(success);
                    console.log(success);
                    $.each(success, function (i, item) {
                        console.log(item.COD_PREGUNTA);
                    });
                },
                error: function (e, text) {
                    alert(e.message+text+"pailas")
                }
            });
        }*@




        @*function leer_pregunta(){

            //traer valores de preguntas y atributos seleccionados junto con timestamp e informacion de usuario
            $pregunta= document.getElementById("DESCRIPCION").value;
            $atributo=document.getElementById("ATRIBUTOS").value;
            var fecha_creacion = "@HttpContext.Current.Timestamp";
            var usuario_creacion = "@HttpContext.Current.User.Identity.Name"

            ////Traer valores
            //var cod_cliente = $("#CLIENTES").data("ejDropDownList").option("value") || "";
            //var valor_contrato = $("#VALOR_CONTRATO").data("ejCurrencyTextbox").getValue() || "";
            //var ruta_contrato = $("#id_ruta_contrato").val() || "";
            //var ruta_acta = $("#id_ruta_acta").val() || "";
            //var cod_forma_pago = $("#FORMAS_PAGO").data("ejDropDownList").option("value") || "";
            //var fecha_firma = $("#FECHA_FIRMA").data("ejDatePicker").getValue() || "";
            //var fecha_inicio_ejecucion = $("#FECHA_INICIO_EJECUCION_CONTRATO").data("ejDatePicker").getValue() || "";
            //var fecha_fin_ejecucion = $("#FECHA_FIN_EJECUCION").data("ejDatePicker").getValue() || "";
            //var orden_servicio = $("#orden_servicio").val() || "";
            //var tipos_condiciones_contractuales = $("#TIPO_CONDICION_CONTRACTUAL").data("ejDropDownList").option("value") || "";

            //guardar valores de variables en arreglos representando filas a registrar en db
            var pregunta = {
                COD_PREGUNTA:null,
                DESCRIPCION:$pregunta,
                COD_USUARIO_CREACION:null,
                COD_USUARIO_ULTIMA_MODIFICACION: null,
                FECHA_CREACION: fecha_creacion,
                FECHA_ULTIMA_MODIFICACION: fecha_creacion,
                ESTADO_PREGUNTA: null
            };

            //crear JSON con objetos asociados a arreglos(filas) para pasarlos como parametro a la db
            var data = JSON.stringify({ PREGUNTA: pregunta});
            //generación de url(accion) que realiza insert en DB
            var url = "guardar_pregunta";
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: "json",
                contentType: "application/json; charset=utf-8"
            });
        }*@




    var global_fecha_ini = "";
    var global_fecha_fin = "";
    var global_fecha_firma = "";

    //Cargue de cultura
    $(document).ready(function () {

            //$("#Grid").ejGrid("model.locale", "es-CO");
            ej.Grid.Locale["es-CO"] = {
                EmptyRecord: "No hay registros que mostrar",
                GroupDropArea: "Arrastre un encabezado de columna aquí para agrupar su columna",
                DeleteOperationAlert: "No hay registros seleccionados para la operación de eliminación",
                EditOperationAlert: "No hay registros seleccionados para la operación de edición",
                SaveButton: "Guardar",
                OKButton: "Aceptar",
                CancelButton: "Cancelar",
                EditFormTitle: "Detalles de ",
                AddFormTitle: "Añadir nuevo registro",
                GroupCaptionFormat: "{{:headerText}}: {{:key}} - {{:count}} {{if count == 1 }} ítem {{else}} artículos {{/if}} ",


            };
            ej.Pager.Locale["es-CO"] = {
                pagerInfo: "{0} de {1} páginas ({2} artículos)",
                firstPageTooltip: "Ir a la primera página",
                lastPageTooltip: "Ir a la última página",
                nextPageTooltip: "Ir a la página siguiente",
                previousPageTooltip: "Ir a la página anterior",
                nextPagerTooltip: "Ir al siguiente Pager",
                previousPagerTooltip: "Ir a Pager anterior"
            };

            ej.ExcelFilter.Locale["es-CO"] = {
                SortNoSmaller: "Ordenar de menor a mayor",
                SortNoLarger: "Ordenar de mayor a menor",
                SortTextAscending: "Ordenar de A a Z",
                SortTextDescending: "Ordenar de Z a A",
                SortDateOldest: "Ordenar por Más antiguos",
                SortDateNewest: "Ordenar por Más reciente",
                SortByColor: "Ordenar por color",
                SortByCellColor: "Ordenar por color de la célula",
                SortByFontColor: "Ordenar por Color de fuente",
                FilterByColor: "Filtrar por color",
                CustomSort: "Orden personalizado",
                FilterByCellColor: "Filtrar por color de la célula",
                FilterByFontColor: "Filtrar por color de fuente",
                ClearFilter: "Borrar filtro",
                NumberFilter: "Número Filtros",
                GuidFilter: "Gud Filtros",
                TextFilter: "Filtros de texto",
                DateFilter: "Filtros de fecha",
                DateTimeFilter: "Fecha filtros de tiempo",
                SelectAll: "Seleccionar todo",
                Blanks: "Los espacios en blanco",
                Search: "Buscar",
                Showrowswhere: "Mostrar filas",
                NumericTextboxWaterMark: "introducir el valor",
                StringMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Comienza con", value: "startswith" }, { text: "Termina con", value: "endswith" }, { text: "contiene", value: "contains" }, { text: "Filtro personalizado", value: "customfilter" },],
                NumberMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
                GuidMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Filtro personalizado", value: "customfilter" },],
                DateMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
                DatetimeMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
                Top10MenuOptions: [{ text: "Parte superior", value: "top" }, { text: "Fondo", value: "bottom" },],
                title: "Filtro personalizado",
                PredicateAnd: "Y",
                PredicateOr: "O",
                Ok: "Aceptar",
                MatchCase: "Coincidencia",
                Cancel: "Cancelar",
                NoResult: "No se encontraron coincidencias",
                CheckBoxStatusMsg: "No todos los elementos que muestran",
                DatePickerWaterMark: "Seleccione fecha",
                DateTimePickerWaterMark: "Seleccionar fecha y hora",
                True: "cierto",
                False: "falso"
            };
            ej.DatePicker.Locale["es-CO"] = {
                watermarkText: "Seleccione fecha",
                buttonText: "Hoy",
            };
            /*ej.Uploadbox.Locale["es-CO"] = {
                buttonText: {
                    upload: "Subir",
                    browse: "Vistazo",
                    cancel: "Cancelar",
                    close: "Cerca"
                },
                dialogText: {
                    title: "Subir Box",
                    name: "Nombre",
                    size: "tamaño",
                    status: "Estado"
                },
                dropAreaText: "Soltar los archivos o haga clic para cargar",
                filedetail: "El tamaño del archivo seleccionado es demasiado grande. Por favor, seleccione un archivo dentro del tamaño válido.",
                denyError: "No se permiten archivos con extensiones #Extension.",
                allowError: "Sólo se permiten archivos con extensiones #Extension.",
                cancelToolTip: "Cancelar",
                removeToolTip: "retirar",
                retryToolTip: "Rever",
                completedToolTip: "Terminado",
                failedToolTip: "Ha fallado",
                closeToolTip: "Cerca",
            };*/
            ej.NumericTextbox.Locale["es-CO"] = {
                watermarkText: "introducir el valor",
            };
            ej.NumericTextbox.Locale = "es-CO";
        });
    </script>
}

<!--Modelos o templates para botones-->
<script type="text/x-jsrender" id="Adjuntar">
    <div id="boton_adjuntar"></div>
</script>